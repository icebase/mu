// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/mu.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersRequestMultiError, or nil if none found.
func (m *GetUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	if len(errors) > 0 {
		return GetUsersRequestMultiError(errors)
	}

	return nil
}

// GetUsersRequestMultiError is an error wrapping multiple validation errors
// returned by GetUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersRequestMultiError) AllErrors() []error { return m }

// GetUsersRequestValidationError is the validation error returned by
// GetUsersRequest.Validate if the designated constraints aren't met.
type GetUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersRequestValidationError) ErrorName() string { return "GetUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersRequestValidationError{}

// Validate checks the field values on GetUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersResponseMultiError, or nil if none found.
func (m *GetUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUsersResponseMultiError(errors)
	}

	return nil
}

// GetUsersResponseMultiError is an error wrapping multiple validation errors
// returned by GetUsersResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersResponseMultiError) AllErrors() []error { return m }

// GetUsersResponseValidationError is the validation error returned by
// GetUsersResponse.Validate if the designated constraints aren't met.
type GetUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersResponseValidationError) ErrorName() string { return "GetUsersResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersResponseValidationError{}

// Validate checks the field values on UploadTrafficLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadTrafficLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadTrafficLogRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadTrafficLogRequestMultiError, or nil if none found.
func (m *UploadTrafficLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadTrafficLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	for idx, item := range m.GetLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UploadTrafficLogRequestValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UploadTrafficLogRequestValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UploadTrafficLogRequestValidationError{
					field:  fmt.Sprintf("Logs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UploadAt

	if len(errors) > 0 {
		return UploadTrafficLogRequestMultiError(errors)
	}

	return nil
}

// UploadTrafficLogRequestMultiError is an error wrapping multiple validation
// errors returned by UploadTrafficLogRequest.ValidateAll() if the designated
// constraints aren't met.
type UploadTrafficLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadTrafficLogRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadTrafficLogRequestMultiError) AllErrors() []error { return m }

// UploadTrafficLogRequestValidationError is the validation error returned by
// UploadTrafficLogRequest.Validate if the designated constraints aren't met.
type UploadTrafficLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadTrafficLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadTrafficLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadTrafficLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadTrafficLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadTrafficLogRequestValidationError) ErrorName() string {
	return "UploadTrafficLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadTrafficLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadTrafficLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadTrafficLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadTrafficLogRequestValidationError{}

// Validate checks the field values on UploadTrafficLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadTrafficLogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadTrafficLogResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadTrafficLogResponseMultiError, or nil if none found.
func (m *UploadTrafficLogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadTrafficLogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UploadTrafficLogResponseMultiError(errors)
	}

	return nil
}

// UploadTrafficLogResponseMultiError is an error wrapping multiple validation
// errors returned by UploadTrafficLogResponse.ValidateAll() if the designated
// constraints aren't met.
type UploadTrafficLogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadTrafficLogResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadTrafficLogResponseMultiError) AllErrors() []error { return m }

// UploadTrafficLogResponseValidationError is the validation error returned by
// UploadTrafficLogResponse.Validate if the designated constraints aren't met.
type UploadTrafficLogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadTrafficLogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadTrafficLogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadTrafficLogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadTrafficLogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadTrafficLogResponseValidationError) ErrorName() string {
	return "UploadTrafficLogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadTrafficLogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadTrafficLogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadTrafficLogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadTrafficLogResponseValidationError{}

// Validate checks the field values on VUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VUser with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VUserMultiError, or nil if none found.
func (m *VUser) ValidateAll() error {
	return m.validate(true)
}

func (m *VUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Uuid

	// no validation rules for AlterId

	// no validation rules for Level

	if len(errors) > 0 {
		return VUserMultiError(errors)
	}

	return nil
}

// VUserMultiError is an error wrapping multiple validation errors returned by
// VUser.ValidateAll() if the designated constraints aren't met.
type VUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VUserMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VUserMultiError) AllErrors() []error { return m }

// VUserValidationError is the validation error returned by VUser.Validate if
// the designated constraints aren't met.
type VUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VUserValidationError) ErrorName() string { return "VUserValidationError" }

// Error satisfies the builtin error interface
func (e VUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VUserValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Port

	// no validation rules for Passwd

	// no validation rules for Method

	// no validation rules for Enable

	// no validation rules for TransferEnable

	// no validation rules for U

	// no validation rules for D

	if all {
		switch v := interface{}(m.GetV2RayUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "V2RayUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "V2RayUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetV2RayUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "V2RayUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on UserTrafficLog with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserTrafficLog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserTrafficLog with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserTrafficLogMultiError,
// or nil if none found.
func (m *UserTrafficLog) ValidateAll() error {
	return m.validate(true)
}

func (m *UserTrafficLog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Uuid

	// no validation rules for U

	// no validation rules for D

	if len(errors) > 0 {
		return UserTrafficLogMultiError(errors)
	}

	return nil
}

// UserTrafficLogMultiError is an error wrapping multiple validation errors
// returned by UserTrafficLog.ValidateAll() if the designated constraints
// aren't met.
type UserTrafficLogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserTrafficLogMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserTrafficLogMultiError) AllErrors() []error { return m }

// UserTrafficLogValidationError is the validation error returned by
// UserTrafficLog.Validate if the designated constraints aren't met.
type UserTrafficLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserTrafficLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserTrafficLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserTrafficLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserTrafficLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserTrafficLogValidationError) ErrorName() string { return "UserTrafficLogValidationError" }

// Error satisfies the builtin error interface
func (e UserTrafficLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserTrafficLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserTrafficLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserTrafficLogValidationError{}
