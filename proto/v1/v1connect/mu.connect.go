// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/mu.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/icebase/mu/proto/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MUServiceName is the fully-qualified name of the MUService service.
	MUServiceName = "v1.MUService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MUServicePingProcedure is the fully-qualified name of the MUService's Ping RPC.
	MUServicePingProcedure = "/v1.MUService/Ping"
	// MUServiceGetUsersProcedure is the fully-qualified name of the MUService's GetUsers RPC.
	MUServiceGetUsersProcedure = "/v1.MUService/GetUsers"
	// MUServiceUploadTrafficLogProcedure is the fully-qualified name of the MUService's
	// UploadTrafficLog RPC.
	MUServiceUploadTrafficLogProcedure = "/v1.MUService/UploadTrafficLog"
)

// MUServiceClient is a client for the v1.MUService service.
type MUServiceClient interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	GetUsers(context.Context, *connect.Request[v1.GetUsersRequest]) (*connect.Response[v1.GetUsersResponse], error)
	UploadTrafficLog(context.Context, *connect.Request[v1.UploadTrafficLogRequest]) (*connect.Response[v1.UploadTrafficLogResponse], error)
}

// NewMUServiceClient constructs a client for the v1.MUService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMUServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MUServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mUServiceMethods := v1.File_v1_mu_proto.Services().ByName("MUService").Methods()
	return &mUServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+MUServicePingProcedure,
			connect.WithSchema(mUServiceMethods.ByName("Ping")),
			connect.WithClientOptions(opts...),
		),
		getUsers: connect.NewClient[v1.GetUsersRequest, v1.GetUsersResponse](
			httpClient,
			baseURL+MUServiceGetUsersProcedure,
			connect.WithSchema(mUServiceMethods.ByName("GetUsers")),
			connect.WithClientOptions(opts...),
		),
		uploadTrafficLog: connect.NewClient[v1.UploadTrafficLogRequest, v1.UploadTrafficLogResponse](
			httpClient,
			baseURL+MUServiceUploadTrafficLogProcedure,
			connect.WithSchema(mUServiceMethods.ByName("UploadTrafficLog")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mUServiceClient implements MUServiceClient.
type mUServiceClient struct {
	ping             *connect.Client[v1.PingRequest, v1.PingResponse]
	getUsers         *connect.Client[v1.GetUsersRequest, v1.GetUsersResponse]
	uploadTrafficLog *connect.Client[v1.UploadTrafficLogRequest, v1.UploadTrafficLogResponse]
}

// Ping calls v1.MUService.Ping.
func (c *mUServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// GetUsers calls v1.MUService.GetUsers.
func (c *mUServiceClient) GetUsers(ctx context.Context, req *connect.Request[v1.GetUsersRequest]) (*connect.Response[v1.GetUsersResponse], error) {
	return c.getUsers.CallUnary(ctx, req)
}

// UploadTrafficLog calls v1.MUService.UploadTrafficLog.
func (c *mUServiceClient) UploadTrafficLog(ctx context.Context, req *connect.Request[v1.UploadTrafficLogRequest]) (*connect.Response[v1.UploadTrafficLogResponse], error) {
	return c.uploadTrafficLog.CallUnary(ctx, req)
}

// MUServiceHandler is an implementation of the v1.MUService service.
type MUServiceHandler interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	GetUsers(context.Context, *connect.Request[v1.GetUsersRequest]) (*connect.Response[v1.GetUsersResponse], error)
	UploadTrafficLog(context.Context, *connect.Request[v1.UploadTrafficLogRequest]) (*connect.Response[v1.UploadTrafficLogResponse], error)
}

// NewMUServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMUServiceHandler(svc MUServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mUServiceMethods := v1.File_v1_mu_proto.Services().ByName("MUService").Methods()
	mUServicePingHandler := connect.NewUnaryHandler(
		MUServicePingProcedure,
		svc.Ping,
		connect.WithSchema(mUServiceMethods.ByName("Ping")),
		connect.WithHandlerOptions(opts...),
	)
	mUServiceGetUsersHandler := connect.NewUnaryHandler(
		MUServiceGetUsersProcedure,
		svc.GetUsers,
		connect.WithSchema(mUServiceMethods.ByName("GetUsers")),
		connect.WithHandlerOptions(opts...),
	)
	mUServiceUploadTrafficLogHandler := connect.NewUnaryHandler(
		MUServiceUploadTrafficLogProcedure,
		svc.UploadTrafficLog,
		connect.WithSchema(mUServiceMethods.ByName("UploadTrafficLog")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1.MUService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MUServicePingProcedure:
			mUServicePingHandler.ServeHTTP(w, r)
		case MUServiceGetUsersProcedure:
			mUServiceGetUsersHandler.ServeHTTP(w, r)
		case MUServiceUploadTrafficLogProcedure:
			mUServiceUploadTrafficLogHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMUServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMUServiceHandler struct{}

func (UnimplementedMUServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.MUService.Ping is not implemented"))
}

func (UnimplementedMUServiceHandler) GetUsers(context.Context, *connect.Request[v1.GetUsersRequest]) (*connect.Response[v1.GetUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.MUService.GetUsers is not implemented"))
}

func (UnimplementedMUServiceHandler) UploadTrafficLog(context.Context, *connect.Request[v1.UploadTrafficLogRequest]) (*connect.Response[v1.UploadTrafficLogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.MUService.UploadTrafficLog is not implemented"))
}
