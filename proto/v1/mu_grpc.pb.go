// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/mu.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MUService_Ping_FullMethodName             = "/v1.MUService/Ping"
	MUService_GetUsers_FullMethodName         = "/v1.MUService/GetUsers"
	MUService_UploadTrafficLog_FullMethodName = "/v1.MUService/UploadTrafficLog"
)

// MUServiceClient is the client API for MUService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MUServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	UploadTrafficLog(ctx context.Context, in *UploadTrafficLogRequest, opts ...grpc.CallOption) (*UploadTrafficLogResponse, error)
}

type mUServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMUServiceClient(cc grpc.ClientConnInterface) MUServiceClient {
	return &mUServiceClient{cc}
}

func (c *mUServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, MUService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mUServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, MUService_GetUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mUServiceClient) UploadTrafficLog(ctx context.Context, in *UploadTrafficLogRequest, opts ...grpc.CallOption) (*UploadTrafficLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadTrafficLogResponse)
	err := c.cc.Invoke(ctx, MUService_UploadTrafficLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MUServiceServer is the server API for MUService service.
// All implementations must embed UnimplementedMUServiceServer
// for forward compatibility.
type MUServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	UploadTrafficLog(context.Context, *UploadTrafficLogRequest) (*UploadTrafficLogResponse, error)
	mustEmbedUnimplementedMUServiceServer()
}

// UnimplementedMUServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMUServiceServer struct{}

func (UnimplementedMUServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMUServiceServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedMUServiceServer) UploadTrafficLog(context.Context, *UploadTrafficLogRequest) (*UploadTrafficLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadTrafficLog not implemented")
}
func (UnimplementedMUServiceServer) mustEmbedUnimplementedMUServiceServer() {}
func (UnimplementedMUServiceServer) testEmbeddedByValue()                   {}

// UnsafeMUServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MUServiceServer will
// result in compilation errors.
type UnsafeMUServiceServer interface {
	mustEmbedUnimplementedMUServiceServer()
}

func RegisterMUServiceServer(s grpc.ServiceRegistrar, srv MUServiceServer) {
	// If the following call pancis, it indicates UnimplementedMUServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MUService_ServiceDesc, srv)
}

func _MUService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MUServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MUService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MUServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MUService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MUServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MUService_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MUServiceServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MUService_UploadTrafficLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadTrafficLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MUServiceServer).UploadTrafficLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MUService_UploadTrafficLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MUServiceServer).UploadTrafficLog(ctx, req.(*UploadTrafficLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MUService_ServiceDesc is the grpc.ServiceDesc for MUService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MUService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.MUService",
	HandlerType: (*MUServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _MUService_Ping_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _MUService_GetUsers_Handler,
		},
		{
			MethodName: "UploadTrafficLog",
			Handler:    _MUService_UploadTrafficLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/mu.proto",
}
